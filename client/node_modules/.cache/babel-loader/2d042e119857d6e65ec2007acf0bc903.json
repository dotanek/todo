{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Mateusz\\\\Desktop\\\\todo\\\\src\\\\components\\\\List\\\\List.jsx\";\nimport React, { Component } from 'react';\nimport styled from 'styled-components';\nimport Nav from './Nav';\nimport Contents from './Contents';\nimport Details from './Details';\nconst Container = styled.div`\n    display: flex;\n    width: 100%;\n    height: calc(100vh - 2px);\n    margin: 0;\n    padding: 0;\n`;\nconst Button = styled.div`\n    position: absolute;\n    left: 10px;\n    bottom: 10px;\n    width: 50px;\n    height: 50px;\n    border-radius: 25px;\n    background-color: #105510;\n    z-index: 1001;\n    \n    &:hover {\n        cursor: pointer;\n    }\n`;\nlet date = new Date();\nconst taskTabs = [{\n  label: 'Today',\n  id: 'today',\n  groupFilter: taskGroup => {\n    if (taskGroup.date.getYear() === date.getYear() && taskGroup.date.getMonth() === date.getMonth() && taskGroup.date.getDay() === date.getDay()) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n}, {\n  label: 'Tomorrow',\n  id: 'tomorrow',\n  groupFilter: taskGroup => {\n    if (taskGroup.date.getYear() === date.getYear() && taskGroup.date.getMonth() === date.getMonth() && taskGroup.date.getDay() === date.getDay() + 1) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n}, {\n  label: 'This week',\n  id: 'this-week',\n  groupFilter: taskGroup => {\n    let weekStart = new Date();\n    let weekEnd = new Date();\n    weekStart.setDate(date.getDate() - date.getDay());\n    weekStart.setHours(24, 0, 0);\n    weekEnd.setDate(date.getDate() + (7 - date.getDay()));\n    weekEnd.setHours(23, 59, 59);\n\n    if (taskGroup.date >= weekStart && taskGroup.date <= weekEnd) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n}, {\n  label: 'Next week',\n  id: 'next-week',\n  groupFilter: taskGroup => {\n    let weekStart = new Date();\n    let weekEnd = new Date();\n    weekStart.setDate(date.getDate() - date.getDay() + 7);\n    weekStart.setHours(24, 0, 0);\n    weekEnd.setDate(date.getDate() + (7 - date.getDay()) + 7);\n    weekEnd.setHours(23, 59, 59);\n\n    if (taskGroup.date >= weekStart && taskGroup.date <= weekEnd) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n}];\n\nclass List extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      navToggle: window.innerWidth >= 900,\n      detailsToggle: window.innerWidth >= 700,\n      taskGroups: [],\n      activeTab: taskTabs[0]\n    };\n\n    this.onResizeWindow = () => {\n      let navToggle;\n      let detailsToggle;\n\n      if (window.innerWidth < 700) {\n        navToggle = false;\n        detailsToggle = false;\n      } else if (window.innerWidth < 900) {\n        navToggle = false;\n        detailsToggle = true;\n      } else {\n        navToggle = true;\n        detailsToggle = true;\n      }\n\n      if (typeof this.state.userNavToggle !== 'undefined' && this.state.userNavToggle === false) {\n        navToggle = false; // Once user has hidden the nav it should not appear on resize.\n      }\n\n      this.setState({\n        navToggle,\n        detailsToggle\n      });\n    };\n\n    this.onClickWindow = e => {\n      if (!this.navRef.current.contains(e.target) && !this.buttonRef.current.contains(e.target) && window.innerWidth < 900) {\n        this.setState({\n          navToggle: false\n        }); // Hides navigation when clicking outside of it in mobile mode.\n      }\n    };\n\n    this.onClickButton = () => {\n      // Auto toggle and user toggle is spearated.\n      if (typeof this.state.userNavToggle === 'undefined') {\n        this.setState({\n          userNavToggle: !this.state.navToggle,\n          navToggle: !this.state.navToggle\n        });\n      } else {\n        this.setState({\n          userNavToggle: !this.state.userNavToggle,\n          navToggle: !this.state.navToggle\n        });\n      }\n    };\n\n    this.onClickTaskTab = taskTab => {\n      this.setState({\n        activeTab: taskTab\n      });\n    };\n\n    this.componentDidMount = () => {\n      window.addEventListener('resize', this.onResizeWindow);\n      window.addEventListener('click', this.onClickWindow); // Grouping tasks by date.\n\n      let taskGroups = [];\n      let date2 = new Date();\n      date2.setDate(date.getDate() + 1);\n      let date3 = new Date();\n      date3.setDate(date.getDate() + 2);\n      let date4 = new Date();\n      date4.setDate(23);\n      const tasks = [{\n        id: 'task1',\n        title: 'Wyrzucić śmieci.',\n        date: date\n      }, {\n        id: 'task2',\n        title: 'Zrobić pranie.',\n        date: date\n      }, {\n        id: 'task3',\n        title: 'Pamiętaj aby strzelić bujakę po mieście i dostać limo.',\n        date: date2\n      }, {\n        id: 'task3',\n        title: 'Pamiętaj o kablu do akumulatora.',\n        date: date3\n      }, {\n        id: 'task3',\n        title: 'Pobić żonę',\n        date: date4\n      }];\n      tasks.forEach(t => {\n        let target = taskGroups.find(g => g.date === t.date);\n\n        if (typeof target === 'undefined') {\n          taskGroups.push({\n            tasks: [t],\n            date: t.date\n          });\n        } else {\n          target.tasks.push(t);\n        }\n      });\n      this.setState({\n        taskGroups\n      });\n    };\n\n    this.navRef = React.createRef();\n    this.buttonRef = React.createRef(); // This is temporary, will be deleted.\n  } // -- Events --\n\n\n  render() {\n    return /*#__PURE__*/React.createElement(Container, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Nav, {\n      activeTab: this.state.activeTab,\n      taskTabs: taskTabs,\n      navRef: this.navRef,\n      navToggle: this.state.navToggle,\n      taskGroups: this.state.taskGroups,\n      onClickTaskTab: taskTab => this.onClickTaskTab(taskTab),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(Contents, {\n      navToggle: this.state.navToggle,\n      activeTab: this.state.activeTab,\n      taskGroups: this.state.taskGroups,\n      activeTask: this.state.activeTask,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(Details, {\n      detailsToggle: this.state.detailsToggle,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(Button, {\n      ref: this.buttonRef,\n      onClick: this.onClickButton,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 17\n      }\n    }));\n  }\n\n}\n\nexport default List;","map":{"version":3,"sources":["C:/Users/Mateusz/Desktop/todo/src/components/List/List.jsx"],"names":["React","Component","styled","Nav","Contents","Details","Container","div","Button","date","Date","taskTabs","label","id","groupFilter","taskGroup","getYear","getMonth","getDay","weekStart","weekEnd","setDate","getDate","setHours","List","constructor","props","state","navToggle","window","innerWidth","detailsToggle","taskGroups","activeTab","onResizeWindow","userNavToggle","setState","onClickWindow","e","navRef","current","contains","target","buttonRef","onClickButton","onClickTaskTab","taskTab","componentDidMount","addEventListener","date2","date3","date4","tasks","title","forEach","t","find","g","push","createRef","render","activeTask"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport styled from 'styled-components';\r\n\r\nimport Nav from './Nav';\r\nimport Contents from './Contents';\r\nimport Details from './Details';\r\n\r\nconst Container = styled.div`\r\n    display: flex;\r\n    width: 100%;\r\n    height: calc(100vh - 2px);\r\n    margin: 0;\r\n    padding: 0;\r\n`\r\n\r\nconst Button = styled.div`\r\n    position: absolute;\r\n    left: 10px;\r\n    bottom: 10px;\r\n    width: 50px;\r\n    height: 50px;\r\n    border-radius: 25px;\r\n    background-color: #105510;\r\n    z-index: 1001;\r\n    \r\n    &:hover {\r\n        cursor: pointer;\r\n    }\r\n`\r\n\r\nlet date = new Date();\r\n\r\nconst taskTabs = [ \r\n    { \r\n        label: 'Today', \r\n        id:'today',\r\n        groupFilter: (taskGroup) => {\r\n            if (\r\n                taskGroup.date.getYear() === date.getYear() &&\r\n                taskGroup.date.getMonth() === date.getMonth() &&\r\n                taskGroup.date.getDay() === date.getDay()\r\n            ) {\r\n                return true;\r\n            } else {\r\n                return false;\r\n            }\r\n        }\r\n    },\r\n    { \r\n        label: 'Tomorrow',\r\n        id:'tomorrow',\r\n        groupFilter: (taskGroup) => {\r\n            if (\r\n                taskGroup.date.getYear() === date.getYear() &&\r\n                taskGroup.date.getMonth() === date.getMonth() &&\r\n                taskGroup.date.getDay() === date.getDay() + 1\r\n            ) {\r\n                return true;\r\n            } else {\r\n                return false;\r\n            }\r\n        }\r\n    },\r\n    { \r\n        label: 'This week',\r\n        id: 'this-week',\r\n        groupFilter: (taskGroup) => {\r\n            let weekStart = new Date();\r\n            let weekEnd = new Date();\r\n            weekStart.setDate(date.getDate() - date.getDay());\r\n            weekStart.setHours(24,0,0);\r\n            weekEnd.setDate(date.getDate() + (7 - date.getDay()));\r\n            weekEnd.setHours(23,59,59);\r\n\r\n            if (\r\n                taskGroup.date >= weekStart &&\r\n                taskGroup.date <= weekEnd\r\n            ) {\r\n                return true;\r\n            } else {\r\n                return false;\r\n            }\r\n        } \r\n    },\r\n    {\r\n        label: 'Next week',\r\n        id: 'next-week',\r\n        groupFilter: (taskGroup) => {\r\n            let weekStart = new Date();\r\n            let weekEnd = new Date();\r\n            weekStart.setDate((date.getDate() - date.getDay()) + 7);\r\n            weekStart.setHours(24,0,0);\r\n            weekEnd.setDate((date.getDate() + (7 - date.getDay())) + 7);\r\n            weekEnd.setHours(23,59,59);\r\n\r\n            if (\r\n                taskGroup.date >= weekStart &&\r\n                taskGroup.date <= weekEnd\r\n            ) {\r\n                return true;\r\n            } else {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n];\r\n\r\n\r\nclass List extends Component {\r\n    state = {\r\n        navToggle: (window.innerWidth >= 900),\r\n        detailsToggle: (window.innerWidth >= 700),\r\n        taskGroups: [],\r\n        activeTab: taskTabs[0]\r\n    }\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.navRef = React.createRef();\r\n        this.buttonRef = React.createRef(); // This is temporary, will be deleted.\r\n    }\r\n\r\n    // -- Events --\r\n\r\n    onResizeWindow = () => {\r\n        let navToggle;\r\n        let detailsToggle;\r\n\r\n        if (window.innerWidth < 700) {\r\n            navToggle = false;\r\n            detailsToggle = false;\r\n        } else if (window.innerWidth < 900) {\r\n            navToggle = false;\r\n            detailsToggle = true;\r\n        } else {\r\n            navToggle = true;\r\n            detailsToggle = true;\r\n        }\r\n\r\n        if (typeof this.state.userNavToggle !== 'undefined' && this.state.userNavToggle === false) { \r\n            navToggle = false; // Once user has hidden the nav it should not appear on resize.\r\n        }\r\n\r\n        this.setState({ navToggle, detailsToggle });\r\n    }\r\n\r\n    onClickWindow = e => {\r\n        if(\r\n            (!this.navRef.current.contains(e.target) && !this.buttonRef.current.contains(e.target)) &&\r\n            window.innerWidth < 900\r\n        ) {\r\n            this.setState({ navToggle:false }); // Hides navigation when clicking outside of it in mobile mode.\r\n        }\r\n    }\r\n\r\n    onClickButton = () => { // Auto toggle and user toggle is spearated.\r\n        if (typeof this.state.userNavToggle === 'undefined') {\r\n            this.setState({ userNavToggle:!this.state.navToggle, navToggle:!this.state.navToggle });\r\n        } else {\r\n            this.setState({ userNavToggle:!this.state.userNavToggle, navToggle:!this.state.navToggle });\r\n        }\r\n    }\r\n\r\n    onClickTaskTab = (taskTab) => {\r\n        this.setState({ activeTab:taskTab });\r\n    }\r\n\r\n    componentDidMount = () => {\r\n        window.addEventListener('resize', this.onResizeWindow);\r\n        window.addEventListener('click', this.onClickWindow);\r\n\r\n        // Grouping tasks by date.\r\n\r\n        let taskGroups = [];\r\n\r\n        let date2 = new Date();\r\n        date2.setDate(date.getDate() + 1);\r\n        let date3 = new Date();\r\n        date3.setDate(date.getDate() + 2);\r\n        let date4 = new Date();\r\n        date4.setDate(23);\r\n\r\n        const tasks = [\r\n            { id:'task1', title:'Wyrzucić śmieci.', date: date },\r\n            { id:'task2', title:'Zrobić pranie.', date: date },\r\n            { id:'task3', title:'Pamiętaj aby strzelić bujakę po mieście i dostać limo.', date: date2 },\r\n            { id:'task3', title:'Pamiętaj o kablu do akumulatora.', date: date3 },\r\n            { id:'task3', title:'Pobić żonę', date: date4 },\r\n        ];\r\n\r\n        tasks.forEach(t => {\r\n            let target = taskGroups.find(g => g.date === t.date);\r\n\r\n            if (typeof target === 'undefined') {\r\n                taskGroups.push({ tasks:[t], date:t.date });\r\n            } else {\r\n                target.tasks.push(t);\r\n            }\r\n        });\r\n\r\n        this.setState({ taskGroups });\r\n    }\r\n\r\n    render() { \r\n        return (\r\n            <Container>\r\n                <Nav\r\n                    activeTab={this.state.activeTab}\r\n                    taskTabs={taskTabs}\r\n                    navRef={this.navRef}\r\n                    navToggle={this.state.navToggle}\r\n                    taskGroups={this.state.taskGroups}\r\n                    onClickTaskTab={(taskTab) => this.onClickTaskTab(taskTab)}\r\n                />\r\n                <Contents\r\n                    navToggle={this.state.navToggle}\r\n                    activeTab={this.state.activeTab}\r\n                    taskGroups={this.state.taskGroups}\r\n                    activeTask={this.state.activeTask}\r\n                />\r\n                <Details detailsToggle={this.state.detailsToggle}/>\r\n                <Button ref={this.buttonRef} onClick={this.onClickButton}/>\r\n            </Container>\r\n        );\r\n    }\r\n}\r\n \r\nexport default List;"]},"metadata":{},"sourceType":"module"}